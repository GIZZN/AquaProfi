// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const DB_LOGGING = {
  enabled: process.env.DB_LOGGING === 'true' || process.env.NODE_ENV === 'development',
  level: process.env.DB_LOG_LEVEL || 'info', // 'silent', 'error', 'warn', 'info', 'debug'
  showConfig: process.env.DB_SHOW_CONFIG === 'true',
  testConnection: process.env.DB_TEST_CONNECTION !== 'false', // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
};

// –õ–æ–≥–≥–µ—Ä –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const dbLogger = {
  error: (message: string, ...args: unknown[]) => {
    if (DB_LOGGING.enabled && ['error', 'warn', 'info', 'debug'].includes(DB_LOGGING.level)) {
      console.error(`‚ùå [DB ERROR] ${message}`, ...args);
    }
  },
  
  warn: (message: string, ...args: unknown[]) => {
    if (DB_LOGGING.enabled && ['warn', 'info', 'debug'].includes(DB_LOGGING.level)) {
      console.warn(`‚ö†Ô∏è [DB WARN] ${message}`, ...args);
    }
  },
  
  info: (message: string, ...args: unknown[]) => {
    if (DB_LOGGING.enabled && ['info', 'debug'].includes(DB_LOGGING.level)) {
      console.log(`‚ÑπÔ∏è [DB INFO] ${message}`, ...args);
    }
  },
  
  debug: (message: string, ...args: unknown[]) => {
    if (DB_LOGGING.enabled && DB_LOGGING.level === 'debug') {
      console.log(`üîç [DB DEBUG] ${message}`, ...args);
    }
  },
  
  config: (message: string, ...args: unknown[]) => {
    if (DB_LOGGING.showConfig) {
      console.log(`üîß [DB CONFIG] ${message}`, ...args);
    }
  }
};

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏–º–µ–Ω –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
export const getEnvVar = (names: string[]): string | undefined => {
  for (const name of names) {
    if (process.env[name]) {
      return process.env[name];
    }
  }
  return undefined;
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export const getDatabaseConfig = () => {
  const POSTGRES_USER = getEnvVar(['POSTGRES_USER', 'DB_USER']);
  const POSTGRES_PASSWORD = getEnvVar(['POSTGRES_PASSWORD', 'DB_PASSWORD']);
  const POSTGRES_DATABASE = getEnvVar(['POSTGRES_DATABASE', 'DB_NAME']);
  const POSTGRES_HOST = getEnvVar(['POSTGRES_HOST', 'DB_HOST']);
  const POSTGRES_PORT = getEnvVar(['POSTGRES_PORT', 'DB_PORT']);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!POSTGRES_USER) {
    throw new Error('POSTGRES_USER (–∏–ª–∏ DB_USER) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  if (!POSTGRES_PASSWORD) {
    throw new Error('POSTGRES_PASSWORD (–∏–ª–∏ DB_PASSWORD) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  if (!POSTGRES_DATABASE) {
    throw new Error('POSTGRES_DATABASE (–∏–ª–∏ DB_NAME) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  if (!POSTGRES_HOST) {
    throw new Error('POSTGRES_HOST (–∏–ª–∏ DB_HOST) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
  if (!POSTGRES_PORT) {
    throw new Error('POSTGRES_PORT (–∏–ª–∏ DB_PORT) –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }

  return {
    user: POSTGRES_USER,
    password: POSTGRES_PASSWORD,
    database: POSTGRES_DATABASE,
    host: POSTGRES_HOST,
    port: parseInt(POSTGRES_PORT),
  };
};

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SSL –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º pg_hba.conf
export const getSSLConfig = (host: string) => {
  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ SSL —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (process.env.POSTGRES_SSL === 'false' || process.env.DB_SSL === 'false') {
    return false;
  }
  
  const isLocalhost = host === 'localhost' || host === '127.0.0.1' || host === '::1';
  
  if (isLocalhost) {
    return false;
  }
  
  // –û—Ç–∫–ª—é—á–∞–µ–º SSL –¥–ª—è –≤—Å–µ—Ö —Ö–æ—Å—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–µ)
  // –≠—Ç–æ —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Å pg_hba.conf rejects connection
  return false;
};
